!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);function o(){}function r(t){return t()}function s(){return Object.create(null)}function i(t){t.forEach(r)}function c(t){return"function"==typeof t}function u(t,e){return t!=t?e==e:t!==e||t&&"object"==typeof t||"function"==typeof t}function l(t){return 0===Object.keys(t).length}new Set;const a="undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:global;class d{constructor(t){this.options=t,this._listeners="WeakMap"in a?new WeakMap:void 0}observe(t,e){return this._listeners.set(t,e),this._getObserver().observe(t,this.options),()=>{this._listeners.delete(t),this._observer.unobserve(t)}}_getObserver(){var t;return null!==(t=this._observer)&&void 0!==t?t:this._observer=new ResizeObserver(t=>{var e;for(const n of t)d.entries.set(n.target,n),null===(e=this._listeners.get(n.target))||void 0===e||e(n)})}}d.entries="WeakMap"in a?new WeakMap:void 0;let f=!1;function p(t,e){t.appendChild(e)}function h(t){if(!t)return document;const e=t.getRootNode?t.getRootNode():t.ownerDocument;return e&&e.host?e:t.ownerDocument}function $(t,e){return p(t.head||t,e),e.sheet}function m(t,e,n){t.insertBefore(e,n||null)}function b(t){t.parentNode&&t.parentNode.removeChild(t)}function g(t){return document.createElement(t)}function y(t){return document.createTextNode(t)}function _(){return y(" ")}function v(t,e,n,o){return t.addEventListener(e,n,o),()=>t.removeEventListener(e,n,o)}function x(t,e,n){null==n?t.removeAttribute(e):t.getAttribute(e)!==n&&t.setAttribute(e,n)}function k(t,e){e=""+e,t.data!==e&&(t.data=e)}new Map;let w;function E(t){w=t}const O=[],M=[];let S=[];const j=[],C=Promise.resolve();let T=!1;function N(){T||(T=!0,C.then(z))}function P(t){S.push(t)}const L=new Set;let q=0;function z(){if(0!==q)return;const t=w;do{try{for(;q<O.length;){const t=O[q];q++,E(t),A(t.$$)}}catch(t){throw O.length=0,q=0,t}for(E(null),O.length=0,q=0;M.length;)M.pop()();for(let t=0;t<S.length;t+=1){const e=S[t];L.has(e)||(L.add(e),e())}S.length=0}while(O.length);for(;j.length;)j.pop()();T=!1,L.clear(),E(t)}function A(t){if(null!==t.fragment){t.update(),i(t.before_update);const e=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,e),t.after_update.forEach(P)}}const R=new Set;function W(t,e){t&&t.i&&(R.delete(t),t.i(e))}new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","inert","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);let B;function I(t,e){const n=t.$$;null!==n.fragment&&(!function(t){const e=[],n=[];S.forEach(o=>-1===t.indexOf(o)?e.push(o):n.push(o)),n.forEach(t=>t()),S=e}(n.after_update),i(n.on_destroy),n.fragment&&n.fragment.d(e),n.on_destroy=n.fragment=null,n.ctx=[])}function D(t,e,n,u,l,a,d,p=[-1]){const h=w;E(t);const $=t.$$={fragment:null,ctx:[],props:a,update:o,not_equal:l,bound:s(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(h?h.$$.context:[])),callbacks:s(),dirty:p,skip_bound:!1,root:e.target||h.$$.root};d&&d($.root);let m=!1;if($.ctx=n?n(t,e.props||{},(e,n,...o)=>{const r=o.length?o[0]:n;return $.ctx&&l($.ctx[e],$.ctx[e]=r)&&(!$.skip_bound&&$.bound[e]&&$.bound[e](r),m&&function(t,e){-1===t.$$.dirty[0]&&(O.push(t),N(),t.$$.dirty.fill(0)),t.$$.dirty[e/31|0]|=1<<e%31}(t,e)),n}):[],$.update(),m=!0,i($.before_update),$.fragment=!!u&&u($.ctx),e.target){if(e.hydrate){f=!0;const t=(g=e.target,Array.from(g.childNodes));$.fragment&&$.fragment.l(t),t.forEach(b)}else $.fragment&&$.fragment.c();e.intro&&W(t.$$.fragment),function(t,e,n,o){const{fragment:s,after_update:u}=t.$$;s&&s.m(e,n),o||P(()=>{const e=t.$$.on_mount.map(r).filter(c);t.$$.on_destroy?t.$$.on_destroy.push(...e):i(e),t.$$.on_mount=[]}),u.forEach(P)}(t,e.target,e.anchor,e.customElement),f=!1,z()}var g;E(h)}"function"==typeof HTMLElement&&(B=class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){const{on_mount:t}=this.$$;this.$$.on_disconnect=t.map(r).filter(c);for(const t in this.$$.slotted)this.appendChild(this.$$.slotted[t])}attributeChangedCallback(t,e,n){this[t]=n}disconnectedCallback(){i(this.$$.on_disconnect)}$destroy(){I(this,1),this.$destroy=o}$on(t,e){if(!c(e))return o;const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}$set(t){this.$$set&&!l(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}});class H{$destroy(){I(this,1),this.$destroy=o}$on(t,e){if(!c(e))return o;const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}$set(t){this.$$set&&!l(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}}function F(t){!function(t,e,n){const o=h(t);if(!o.getElementById(e)){const t=g("style");t.id=e,t.textContent=n,$(o,t)}}(t,"svelte-10zy88m","p.svelte-10zy88m{margin:0}")}function G(t){let e,n,r,s,c,u,l,a,d,f,h,$,w,E,O,M,S,j;return{c(){e=g("p"),n=g("span"),r=y(t[0]),s=y(" * 2 = "),c=y(t[1]),u=y("\n  , and\n  "),l=g("span"),a=y(t[1]),d=y(" * 2 = "),f=y(t[2]),h=_(),$=g("button"),w=y("Increment counter: "),E=y(t[0]),O=_(),M=g("button"),M.textContent="Reset",x(e,"class","svelte-10zy88m")},m(o,i){m(o,e,i),p(e,n),p(n,r),p(n,s),p(n,c),p(e,u),p(e,l),p(l,a),p(l,d),p(l,f),m(o,h,i),m(o,$,i),p($,w),p($,E),m(o,O,i),m(o,M,i),S||(j=[v($,"click",t[3]),v(M,"click",t[4])],S=!0)},p(t,[e]){1&e&&k(r,t[0]),2&e&&k(c,t[1]),2&e&&k(a,t[1]),4&e&&k(f,t[2]),1&e&&k(E,t[0])},i:o,o:o,d(t){t&&b(e),t&&b(h),t&&b($),t&&b(O),t&&b(M),S=!1,i(j)}}}function J(t,e,n){let o,r,s=1;return t.$$.update=()=>{1&t.$$.dirty&&n(1,o=2*s),2&t.$$.dirty&&n(2,r=2*o)},[s,o,r,function(){n(0,s+=1),console.log("inc count")},function(){n(0,s=1)}]}var K=class extends H{constructor(t){super(),D(this,t,J,G,u,{},F)}};const Q=document.getElementById("svelte-example-dfigure");let U;Q.addEventListener("ready",()=>{const t=Q.querySelector("#svelte-example-target");U=new K({target:t})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,